version: '3.9'

networks:
  l2_network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.2.0/24
  l3_network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.3.0/24
  dmz_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.16.0.0/16

services:
  portal:
    build: ./portal/
    volumes:
      - portal-data:/app/config/
    ports:
      - "443:443"


  dmz-firewall:
    build: ./dmz-firewall/
    cap_add:
      - NET_ADMIN
    networks:
      l3_network:
        ipv4_address: 192.168.3.253
      dmz_network:
        ipv4_address: 172.16.0.253
    ports:
      - "5443:5443"
    volumes:
      - portal-data:/app/portal/

  dmz-transfer:
    build: ./dmz-transfer/
    cap_add:
      - NET_ADMIN
    networks:
      dmz_network:
        ipv4_address: 172.16.0.21
    ports:
      - "4443:80"
    volumes:
      - portal-data:/app/portal/

  router:
    build: ./router/
    cap_add:
      - NET_ADMIN
    networks:
      l2_network:
        ipv4_address: 192.168.2.254
      l3_network:
        ipv4_address: 192.168.3.254

  scada:
    build: ./scada/
    cap_add:
      - NET_ADMIN
    networks:
      l3_network:
        ipv4_address: 192.168.3.20
    ports:
      - '1881:1881'
    volumes:
      - scada-data:/usr/src/app/FUXA/server/_appdata
    dns:
      - 127.0.0.11
        
  plc:
    build: ./plc/
    cap_add:
      - NET_ADMIN
    networks:
      l2_network:
        ipv4_address: 192.168.2.10
    ports:
      - "8080:8080"
    volumes:
      - plc-data:/workdir/webserver

  ews:
    build: ./ews/
    cap_add:
      - NET_ADMIN
    networks:
      l3_network:
        ipv4_address: 192.168.3.11
    ports:
      - "5911:5911"
    volumes:
      - ews-data:/home/engineer/

  pentest:
    build: ./pentest/
    cap_add:
      - NET_ADMIN
      - NET_RAW
    networks:
      l3_network:
        ipv4_address: 192.168.3.30
    ports:
      - "2222:22"
      - "3443:3443"
    depends_on:
      - portal
    volumes:
      - portal-data:/app/portal/

  ids:
    build: ./ids/
    network_mode: host
    depends_on:
      - portal
    volumes:
      - portal-data:/app/portal/
      
  collector:
    build: ./collector/
    cap_add:
      - NET_ADMIN
    networks:
      l3_network:
        ipv4_address: 192.168.3.40
    ports:
      - "2443:2443"
      - "8766:8766"
    depends_on:
      - portal
    volumes:
      - portal-data:/app/portal/
  
  suricata:
    image: jasonish/suricata:latest
    container_name: suricata
    network_mode: host # required for Suricata to access network interfaces directly
    cap_add:
      - NET_ADMIN # allow Suricata to monitor network traffic
      - NET_RAW
    # networks:
    #   - l2_network
    #   - l3_network
    volumes:
      - ./suricata/etc:/etc/suricata              # Suricata config files
      - ./suricata/log:/var/log/suricata          # Suricata logs
      - ./suricata/rules:/var/lib/suricata/rules  # Suricata rules
    command: -i eth0 -i br-6990a6af9f1b -i br-82d1c6fd2752 # -i eth1
    restart: unless-stopped

  elasticsearch:
    image: elastic/elasticsearch:8.19.0
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false # turn off security
      - discovery.type=single-node # no Elasticsearch cluster
      - ELASTIC_PASSWORD=my_strong_password
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - l3_network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.19.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=test
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    networks:
      - l3_network

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.19.0
    container_name: filebeat
    user: root # run as root to access Docker logs
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro # configuration file (read-only)
      - /var/lib/docker/containers:/var/lib/docker/containers:ro # read-only access to log files
      - /var/run/docker.sock:/var/run/docker.sock:ro # read-only access to Docker socket for metadata
    command: filebeat -e
    restart: unless-stopped
    depends_on:
      - elasticsearch
    networks:
      - l3_network

volumes:
  scada-data:
  plc-data:    
  ews-data:
  portal-data:
  esdata1:
    driver: local
